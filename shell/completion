#!/usr/bin/env bash
# shellcheck disable=SC2034
give_me_hostname="$HOME/.dotfiles/bin/give_me_hostname"
fzf_default_options="--select-1  --tac --tiebreak=length,begin,index --reverse --inline-info"
fzf_height="--height ${FZF_TMUX_HEIGHT:-40%} --min-height 25"

# To redraw line after fzf closes (printf '\e[5n')
bind '"\e[0n": redraw-current-line'
export FZF_DEFAULT_COMMAND='ag -g ""'
export COMP_WORDBREAKS=${COMP_WORDBREAKS/\:/}

_complete() {
  local cur="${COMP_WORDS[COMP_CWORD]}"

  if [[ ${cur} == *@*  ]] ; then
    local opts="-P ${cur/@*/}@ -- ${cur/*@/}"
  else
    local opts=" -- ${cur}"
  fi
  # shellcheck disable=SC2086
  COMPREPLY=( $(compgen -W "$(</dev/stdin)" ${opts}) )
  return 0
}

_fzf_compgen_path() {
    ag -g "" "$1"
}

_privkey() {
  find "$HOME"/.ssh -type f -name id_rsa
}

_playbook() {
  find playbooks -maxdepth 1 -type f -name '*.yml'
}

_archlinux_installed_packages() {
   pacman -Qqe
}

log() {
  local cmd log_file
  cmd="command find /var/log/ -type f -name '*log' 2>/dev/null"
  log_file=$(eval "$cmd" | fzf "$fzf_height" --tac --tiebreak=length,begin,index --reverse --inline-info) && less "$log_file"
}

_fzf_complete() {
  local selected fzf post
  local cur="${COMP_WORDS[COMP_CWORD]}"
  local opts=''
  local hosts="$1"
  local separator=${2:- }

  post="$(caller 0 | awk '{print $2}')_post"
  type -t "$post" > /dev/null 2>&1 || post=cat
  fzf="fzf $fzf_default_options $fzf_height"

  if [[ ${cur} == *@*  ]] ; then
    opts="${cur/@*/}@"
    cur="${cur/*@/}"
  fi

  selected=$(cat | $fzf "$hosts" --query "$cur" | $post | tr '\n' "$separator")
  selected=${selected%$separator} # Strip trailing space not to repeat "-o nospace"
  printf '\e[5n'

  if [ -n "$selected" ]; then
    COMPREPLY=(${opts}"$selected")
    return 0
  fi
}

__fzf_history__() {
  local line
  shopt -u nocaseglob nocasematch
  line=$(
    # shellcheck disable=SC1007
    HISTTIMEFORMAT= history |
    FZF_DEFAULT_OPTS="$fzf_height $fzf_default_options --tac -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort $FZF_CTRL_R_OPTS +m" fzf |
    command grep '^ *[0-9]') &&
    if [[ $- =~ H ]]; then
      sed 's/^ *\([0-9]*\)\** .*/!\1/' <<< "$line"
    else
      sed 's/^ *\([0-9]*\)\** *//' <<< "$line"
    fi
}

_fzf_complete_kill() {
  [ -n "${COMP_WORDS[COMP_CWORD]}" ] && return 1

  local selected fzf
  fzf="fzf"
  selected=$(ps -ef | sed 1d | FZF_DEFAULT_OPTS="$fzf_height \
      --reverse $FZF_DEFAULT_OPTS --preview 'echo {}' --preview-window down:3:wrap \
      $FZF_COMPLETION_OPTS" $fzf --multi | awk '{print $2}' | tr '\n' ' ')
  printf '\e[5n'

  if [ -n "$selected" ]; then
    COMPREPLY=( "$selected" )
    return 0
  fi
}

__fzf_select__() {
  local cmd="${FZF_CTRL_T_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type f -print \
    -o -type d -print \
    -o -type l -print 2> /dev/null | cut -b3-"}"
  eval "$cmd" | FZF_DEFAULT_OPTS="$fzf_height --reverse $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" fzf -m "$@" | while read -r item; do
    printf '%q ' "$item"
  done
  echo
}

fzf-file-widget() {
  local selected
  selected="$(__fzf_select__ "$@")"
  READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$selected${READLINE_LINE:$READLINE_POINT}"
  READLINE_POINT=$(( READLINE_POINT + ${#selected} ))
}

__fzf_cd__() {
  local cmd dir
  cmd="${FZF_ALT_C_COMMAND:-"command find -L . \\( -path '*/\\.*' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type d -print 2> /dev/null | sed 1d | cut -b3-"}"
  dir=$(eval "$cmd" | FZF_DEFAULT_OPTS="$fzf_height --reverse $FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS" fzf +m) && printf 'cd %q' "$dir"
}

# v - open files in ~/.viminfo
v() {
  local files
  files=$(grep '^>' ~/.viminfo | cut -c3- |
          while read -r line; do
            [ -f "${line/\~/$HOME}" ] && echo "${line/\~/$HOME}"
          done | fzf-tmux --select-1 --reverse --inline-info +s \
            --tac --multi --preview 'highlight --force -O ansi -l {} 2> /dev/null | head -200' --query "$*" -1) \
            && vim "${files//\~/$HOME}"
}

fmpc() {
  local song_position
  song_position=$(mpc -f "%position%) %artist% - %title%" playlist | \
    fzf-tmux --query="$1" "$fzf_height" --reverse --inline-info +s --select-1 --exit-0 | \
    sed -ne 's/^\([0-9].*\)).*/\1/p') || return 1
  [ -n "$song_position" ] && mpc -q play "$song_position"
}

_complete_ssh() {
  _complete "$@" < <(give_me_hostname ssh)
}

_complete_net() {
  _complete "$@" < <(give_me_hostname)
}

_fzf_complete_ssh() {
  local cur="${COMP_WORDS[COMP_CWORD]}"
  local prev="${COMP_WORDS[COMP_CWORD-1]}"
  case $prev in
    -i)
      _fzf_complete '+m' ' ' "$@" < <(_privkey)
      return 0
  ;;
  esac

  _fzf_complete '+m' ' ' "$@" < <(give_me_hostname ssh)
}

_fzf_complete_ansible() {
  local prev="${COMP_WORDS[COMP_CWORD-1]}"
  case $prev in
    -i)
      _fzf_complete '--multi' ',' "$@" < <(give_me_hostname ssh)
      return 0
  ;;
    -u)
      return 0
  ;;
  esac

  _fzf_complete '--multi' ' ' "$@" < <(_playbook)
}

_fzf_complete_yaourt() {
  local prev="${COMP_WORDS[COMP_CWORD-1]}"
  case $prev in
    -Rcs)
      _fzf_complete '--multi' ' ' "$@" < <(_archlinux_installed_packages)
      return 0
  ;;
  esac
}

_fzf_complete_net() {
  _fzf_complete '+m' ' ' "$@" < <(give_me_hostname)
}

_fzf_complete_ips() {
  _fzf_complete '+m' ' ' "$@" < <(give_me_hostname ips)
}

# Net tools completions
net_tools="ping host mtr mosh telnet ftp dig drill nslookup"
ssh_tools="ssh s n rsync scp sftp"
if hash fzf 2>/dev/null; then
  # shellcheck disable=SC2086
  complete -o default -o bashdefault -o nospace -F _fzf_complete_net $net_tools
  # shellcheck disable=SC2086
  complete -o default -o bashdefault -o nospace -F _fzf_complete_ssh $ssh_tools
  complete -o default -o bashdefault -o nospace -F _fzf_complete_ips whois
  complete -o default -o bashdefault -o nospace -F _fzf_complete_ansible ansible-playbook ap
  complete -o default -o bashdefault -o nospace -F _fzf_complete_yaourt yaourt
else
  # shellcheck disable=SC2086
  complete -o default -o bashdefault -o nospace -F _complete_net $net_tools
  # shellcheck disable=SC2086
  complete -o default -o bashdefault -o nospace -F _complete_ssh $ssh_tools
fi

# Kill completion
complete -F _fzf_complete_kill -o nospace -o default -o bashdefault kill

# Required to refresh the prompt after fzf
bind '"\er": redraw-current-line'
bind '"\e^": history-expand-line'
# CTRL-R - Paste the selected command from history into the command line
# shellcheck disable=SC2016
bind '"\C-r": " \C-e\C-u`__fzf_history__`\e\C-e\e^\er"'
# CTRL-T - Paste the selected file path into the command line
bind -x '"\C-f": "fzf-file-widget"'
# ALT-C - cd into the selected directory
# shellcheck disable=SC2016
bind '"\ed": " \C-e\C-u`__fzf_cd__`\e\C-e\er\C-m"'
