set nocompatible              " be iMproved, required
filetype off                  " required

call plug#begin('~/.vim/bundle')
  Plug 'vim-airline/vim-airline'
  Plug 'airblade/vim-gitgutter'
  Plug 'morhetz/gruvbox'
  Plug 'AndrewRadev/switch.vim'
  Plug 'jiangmiao/auto-pairs'
  Plug 'w0rp/ale'
  Plug 'tpope/vim-surround'
  Plug 'ryanoasis/vim-devicons'
  Plug 'ervandew/supertab'
  Plug 'sheerun/vim-polyglot'
  Plug 'justinmk/vim-sneak'
  Plug 'tpope/vim-fugitive'
  Plug 'junegunn/fzf.vim'
  Plug 'mg979/vim-visual-multi', {'branch': 'master'}
  Plug 'preservim/nerdtree'
call plug#end()

let g:sneak#s_next = 1

set updatetime=250
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" Options diverses
set backup                        " Enable backups
set swapfile                      " Enable swapfiles
set backupdir=~/.vim/backup//     " Backup dir
set directory=~/.vim/swp//        " Swp file dir
set hidden                        " hides buffer
set history=1000                  " remember more commands and search history
set undolevels=1000               " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                         " change the terminal's title
set noerrorbells                  " don't beep

" change the mapleader from \ to ,
let mapleader=","

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Display
set ruler                       " Position du fichier tjs affichée
set showmode                    " Montre le mode actuel
set number                      " Afficher les numéros de ligne
syntax on                       " Coloration syntaxique
set wrap                        " Pas de wordwrap
set showmatch                   " Donne parenthèse correspondante
set showcmd                     " Donne commande incomplète
set autoindent                  " Indentation auto
set copyindent                  " Copier l'indentation existante
set shiftround                  " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch                   " set show matching parenthesis
set ignorecase                  " ignore case when searching
set smartcase                   " ignore case if search pattern is all lowercase,
set smarttab                    " insert tabs on the start of a line
set hlsearch                    " Surligne les résultats de recherche
set incsearch                   " Recherche incrémentale
set expandtab                   " Utilise  plutot que
set softtabstop=4               " Largeur de tab
set sta                         " Smart tabs
set shiftwidth=4                " Largeur d'indentation
set ru                          " Position dans le fichier donnée
set hlg=en                      " Langue de l'aide : english
set mousemodel=popup            " Affiche un popup au clic droit
set showtabline=2               " Affiche tout le temps la ligne des tabs
set numberwidth=5               " Nombre de colonnes que prend les numéros de lignes
set paste
set pastetoggle=<F2>            " pour eviter de faire de la cascade
set ffs=unix,dos
" Show invisible char with F3
set listchars=tab:▸\ ,eol:↲,precedes:«,extends:»,nbsp:␣,trail:•
highlight SpecialKey cterm=NONE ctermbg=160 ctermfg=231 gui=NONE guifg=#ffffff guibg=#d70000
nnoremap <F3> :set list!<CR>
" Detect sqli pattern on current line and cast to int
nnoremap <F4> :s/\.\s*\(\$id\w*\\|\\$w*id\\|\$_\w*\[.*\]\\|Tools::getValue(.*)\)/\. (int) \1/gci<CR>
" Detect sqli pattern in the open buffer and cast to int
nnoremap <F5> :%s/\.\s*\(\$id\w*\\|\\$w*id\\|\$_\w*\[.*\]\\|Tools::getValue(.*)\)/\. (int) \1/gci<CR>
" Replace a bad pSQL by a int on the current line
nnoremap <F6> :s/\.\s*pSQL(\s*\(\$id\w*\\|\\$w*id\\|\$_\w*\[.*\]\\|Tools::getValue(.*)\)\s*)/\. (int) \1/gci<CR>
" Add a pSQL for user retrieved var on the current line
nnoremap <F7> :s/\.\s*\(\$_\w*\[.*\]\\|\$\w*\\|Tools::getValue(.*)\)/\. pSQL( \1 )/gci<CR>
" Replace string by pSQL
" s/(string)\($\w\+\)\./pSQL(\1)\./gc
cmap w!! w !sudo tee % >/dev/null
cmap hex %!xxd
" Options du GUI
set guioptions=ecimMgrp

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_balloons = 1

let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'

" Options internes
set ul=100              " Niveaux d'annulation
set mouse=v             " only in visual mode

if v:version < 800
    set t_Co=256           " Terminaux à 256 couleurs
    colorscheme desert
    let g:airline_theme='base16_tomorrow'
else
    if empty($DISPLAY)
        set background=dark
    else
        source ~/.vim/vimrc.background
    endif
    if (has("termguicolors"))
        set termguicolors
    endif
    let g:gruvbox_italic=1
    let g:gruvbox_contrast_dark='medium'
    let g:gruvbox_contrast_light='hard'
    let g:airline_theme='gruvbox'
    colorscheme gruvbox
endif

" italic comment
highlight Comment cterm=italic gui=italic

" trailing white space
match ErrorMsg '\s\+$'

function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction
nnoremap <silent> <Leader>rts :call TrimWhiteSpace()<CR>

" Navigation entre les buffers
map <C-right> <ESC>:bn<CR>
map <C-left> <ESC>:bp<CR>

imap sdf <ESC>
" To save, ctrl-s.
map <c-s> <Esc>:w<CR>a
map <C-s> <ESC>:w<CR>
imap <C-s> <ESC>:w<CR>a
" Complete options (disable preview scratch window)
set completeopt=menu,menuone,longest
" Limit popup menu height
set pumheight=15

" Options de complétion générale
set completeopt=menu,longest " Options de completion

" Wildmenu (pour faire un petit menu sympa quand on tape une commande VIM)
set wildmenu
set wildmode=longest:full

" reprendre à la dernière ligne
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" detect nagios config
autocmd BufNewFile,BufRead */nagios*/*.{cache,cfg,jinja2} setlocal filetype=nagios

" soa serial
nnoremap <F8> /\<\d\{10}\><CR>ce<C-r>=strftime("%Y%m%d00")<CR><Esc>:echo @"<CR>

nnoremap rm :call delete(expand('%')) \| bdelete! <CR>
nnoremap <leader>wd :write\|bdelete <CR>
nnoremap <leader>x :bdelete<cr>

" use - as a switch key
let g:switch_mapping = "-"

nnoremap ;; m`A;<Esc>``
nnoremap ,, m`A,<Esc>``
nnoremap ## m`I#<Esc>``
nnoremap <leader>' di'
nnoremap <leader>" di"
nnoremap <Leader>q" ciw""<Esc>P
nnoremap <Leader>q' ciw''<Esc>P
nnoremap <Leader>qd daW"=substitute(@@,"'\\\|\"","","g")<CR>P
nnoremap <Leader>v <c-v>

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

" Cursor shape and color
" Tmux will only forward escape sequences to the terminal if surrounded by a DCS sequence
if exists('$TMUX')
   " set insert mode to a black blinking vertical line
   let &t_SI .= "\<esc>Ptmux;\<esc>\<esc>[5 q\<esc>\\"
   let &t_SI .= "\<esc>Ptmux;\<esc>\<esc>]12;black\x7\<esc>\\"
   " set normal mode to a cyan solid block
   let &t_EI .= "\<esc>Ptmux;\<esc>\<esc>[2 q\<esc>\\"
   let &t_EI .= "\<esc>Ptmux;\<esc>\<esc>]12;cyan\x7\<esc>\\"
   " set replace mode to an orange blinking underscore
   let &t_SR .= "\<esc>Ptmux;\<esc>\<esc>[3 q\<esc>\\"
   let &t_SR .= "\<esc>Ptmux;\<esc>\<esc>]12;orange\x7\<esc>\\"

   " reset cursor when leaving tmux
   autocmd VimLeave * silent !echo -ne "\033Ptmux;\033\033[2 q\033\\"
   autocmd VimLeave * silent !echo -ne "\033Ptmux;\033\033]12;gray\007\033\\"
elseif &term =~ "xterm\\|rxvt"
  " set insert mode to a black blinking vertical line
  let &t_SI .= "\<Esc>[5 q"
  let &t_SI .= "\<Esc>]12;black\x7"
  " set normal mode to a cyan solid block
  let &t_EI .= "\<Esc>[2 q"
  let &t_EI .= "\<Esc>]12;cyan\x7"
  " set replace mode to an orange blinking underscore
  let &t_SR .= "\<Esc>[3 q"
  let &t_SR .= "\<Esc>]12;orange\x7"

  " reset cursor when vim exits
  autocmd VimLeave * silent !echo -ne "\e]12;black\x7"
  autocmd VimLeave * silent !echo -ne "\e[5 q"
endif

" initialize cursor shape/color on startup (silent !echo approach doesn't seem to work for tmux)
augroup ResetCursorShape
    au!
    autocmd VimEnter * normal! :startinsert :stopinsert
augroup END

autocmd InsertEnter,InsertLeave * set cul!

let g:ale_linters = { 'php': ['php', 'psalm'] }

"autocmd VimEnter * redraw!

" Open fzf
map <C-p> :Files<CR>

" Open nerdthree
map <C-o> :NERDTreeFocus<CR>

" Start NERDTree when Vim starts with a directory argument.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif

" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

