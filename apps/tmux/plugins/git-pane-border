#!/bin/bash

# color variables
inactive_border='#444444'
active_border='#00afff'
red='#d70085'
yellow='#ff8600'
green='#4db45c'

# Default
ONLY_PANE_ACTIVE=1

readonly inactive_border active_border red yellow green

# read args
for i in "$@"; do
  case $i in
  --pane-current-path=*)
    PANE_CURRENT_PATH="${i#*=}"
    ;;
  --pane-active=*)
    PANE_ACTIVE="${i#*=}"
    ;;
  --display-only-pane-active=*)
    ONLY_PANE_ACTIVE="${i#*=}"
    ;;
  *) # unknown option
    ;;
  esac
  shift
done

# Do nothing if we are not in a git dir, or if we don't want to display on non active pane
if ! ([ -d "$PANE_CURRENT_PATH" ] &&
  git -C "$PANE_CURRENT_PATH" rev-parse --is-inside-work-tree >/dev/null 2>&1) ||
  ( ((PANE_ACTIVE == 0)) && ((ONLY_PANE_ACTIVE == 1))); then
  exit
fi

color() {
  local color=$1 bold="${2:-"nobold"}"
  if ((PANE_ACTIVE = 1)); then
    echo "#[fg=$color,$bold]"
  else
    echo "#[fg=$inactive_border,$bold]"
  fi
}

THEME_GIT_PROMPT_PREFIX="$(color 'default') on  $(color $yellow 'bold')"
THEME_GIT_PROMPT_SUFFIX="$(color $active_border)"
THEME_GIT_PROMPT_CLEAN="$(color $green 'bold')✓$(color $active_border)"
THEME_GIT_PROMPT_AHEAD=" $(color $green 'bold')↑$(color $active_border)"
THEME_GIT_PROMPT_BEHIND=" $(color $red 'bold')↓$(color $active_border)"
THEME_GIT_PROMPT_STAGED="$(color $green 'bold')+$(color $active_border)"
THEME_GIT_PROMPT_UNSTAGED="$(color $yellow 'bold')•$(color $active_border)"
THEME_GIT_PROMPT_UNTRACKED="$(color $red 'bold')•$(color $active_border)"
THEME_GIT_PROMPT_REMOTE="$(color 'default' 'bold') ⤏ $(color $active_border)"

git_branch() {
  ref=$(command git symbolic-ref HEAD 2>/dev/null) ||
    ref=$(command git rev-parse --short HEAD 2>/dev/null) || return
  echo "${ref#refs/heads/}"
}

git_remote() {
  local remote
  remote=$(command git config --get remote.origin.url)
  # Remove prefix before :
  remote="${remote#*:}"
  # Remove .git
  remote="${remote%.*}"
  # Remove https://
  remote=$(echo "$remote" | sed -r -e 's/\/\/[^\/]+\///')
  echo "$remote"
}

_git-status-counts() {
  local status="$1"
  echo "$status" | awk '
  BEGIN {
    untracked=0;
    unstaged=0;
    staged=0;
  }
  {
    if ($0 ~ /^\?\? .+/) {
      untracked += 1
    } else {
      if ($0 ~ /^.[^ ] .+/) {
        unstaged += 1
      }
      if ($0 ~ /^[^ ]. .+/) {
        staged += 1
      }
    }
  }
  END {
    print untracked "\t" unstaged "\t" staged
  }'
}

git_status() {
  local untracked_count unstaged_count staged_count index status=''

  # check status of files
  index=$(command git status --porcelain -b 2>/dev/null)

  # check status of local repository
  if echo "$index" | command grep -q '^## .*ahead'; then
    status="$status$THEME_GIT_PROMPT_AHEAD"
  fi
  if echo "$index" | command grep -q '^## .*behind'; then
    status="$status$THEME_GIT_PROMPT_BEHIND"
  fi

  if [[ -n "$index" ]]; then
    # Count status
    IFS=$'\t' read -r untracked_count unstaged_count staged_count < <(_git-status-counts "$index")

    if echo "$index" | command grep -q '^[AMRD]. '; then
      status="$status $THEME_GIT_PROMPT_STAGED$staged_count"
    fi
    if echo "$index" | command grep -q '^.[MTD] '; then
      status="$status $THEME_GIT_PROMPT_UNSTAGED$unstaged_count"
    fi
    if echo "$index" | command grep -q -E '^\?\? '; then
      status="$status $THEME_GIT_PROMPT_UNTRACKED$untracked_count"
    fi
    if echo "$index" | command grep -q '^UU '; then
      status="$status$THEME_GIT_PROMPT_UNMERGED"
    fi
  else
    status="$status$THEME_GIT_PROMPT_CLEAN"
  fi

  echo "$status"
}

git_prompt() {
  local _branch _status _remote _result=""
  _branch=$(git_branch)
  _status=$(git_status)
  _remote=$(git_remote)

  if [[ "${_branch}x" != "x" ]]; then
    _result="$THEME_GIT_PROMPT_PREFIX$_branch"
    if [[ "${_status}x" != "x" ]]; then
      _result="$_result$_status"
    fi
    if [[ -n ${_remote+x} ]]; then
      _result="$_result$THEME_GIT_PROMPT_REMOTE$_remote"
    fi
    _result="$_result$THEME_GIT_PROMPT_SUFFIX "
  fi
  echo "$_result"
}

# final output
echo -n " $(cd "$PANE_CURRENT_PATH" && git_prompt)"
