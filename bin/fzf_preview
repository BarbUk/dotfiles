#!/bin/bash
#
# Copyright (C) 2019 BarbUk <barbarisme@gmail.com>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.
#

set -o errexit -o pipefail -o nounset

readonly item=$1
readonly monitored_hosts="$HOME/.dsh/group/monitored"
readonly default_size=50

command_exists() {
	local command=$1
	command -v "$command" > /dev/null 2>&1
}

# Define apps to use
tree="tree -C"
if command_exists eza; then
	tree="eza --colour=always --icons --group-directories-first --level 1"
elif command_exists lsd; then
	tree="lsd --color always --icon always --group-directories-first --depth 1"
elif command_exists ls; then
	tree="ls --color=auto --group-directories-first --almost-all"
fi

highlight="cat"
if command_exists bat; then
	highlight="bat --style=numbers,changes --color=always"
elif command_exists highlight; then
	highlight="highlight --force -O ansi -l"
elif command_exists pygmentize; then
	highlight="pygmentize -g"
fi

# shellcheck source=bin/color_echo
. color_echo

if [ -d "$item" ]; then
	$tree "$item" | head -"$default_size"

elif [ -f "$item" ]; then
	if [[ "$item" == *.tar.* ]]; then
		tar -vtf "$item" | head -"$default_size"
	else

		case $(file -b --mime-type "$item") in
			text/*)
				$highlight "$item" | head -"$default_size"
				;;
			application/json)
				$highlight "$item" | head -"$default_size"
				;;
			inode/directory)
				$tree "$item" | head -"$default_size"
				;;
			image/*)
				if command -v catimg > /dev/null 2>&1; then
					catimg -w 100 "$item" 2> /dev/null
				elif command -v viu > /dev/null 2>&1; then
					viu -w 100 "$item" 2> /dev/null
				elif command -v tiv > /dev/null 2>&1; then
					tiv -w 100 -h 100 "$item" 2> /dev/null
				fi
				;;
			application/zip)
				unzip -l "$item" | head -"$default_size"
				;;
			application/pdf)
				pdftotext "$item" -
				;;
		esac

	fi
elif [ -f "$monitored_hosts" ] && grep -q "$item" "$monitored_hosts"; then
	information "Informations"
	echo "$RDA_URL$item"
	echo
	information "Monitoring"
	echo "$MONITORING_URL$item"

	if [[ $(nmcli networking connectivity) == 'full' ]]; then
		echo
		information "Ongoing problems"
		ssh -t "$MONITORING_HOST" -- icingacli monitoring list service --host="$item" --verbose --problems 2> /dev/null
	fi
fi
